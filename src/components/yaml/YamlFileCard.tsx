import React from 'react';
import { YamlFile, YamlFileType, YamlStatus } from '../../types';
import './YamlFileCard.css';

interface YamlFileCardProps {
  yamlFile: YamlFile;
  onEdit: (file: YamlFile) => void;
  onValidate: (fileId: string) => void;
  onDownload: (file: YamlFile) => void;
  onRegenerate: (fileId: string) => void;
  onPreview: (file: YamlFile) => void;
}

const YamlFileCard: React.FC<YamlFileCardProps> = ({
  yamlFile,
  onEdit,
  onValidate,
  onDownload,
  onRegenerate,
  onPreview
}) => {
  const getFileTypeIcon = (type: YamlFileType) => {
    switch (type) {
      case YamlFileType.AGENTS:
        return '🤖';
      case YamlFileType.TASKS:
        return '📋';
      case YamlFileType.TOOLS:
        return '🔧';
      case YamlFileType.CONFIG:
        return '⚙️';
      default:
        return '📄';
    }
  };

  const getFileTypeLabel = (type: YamlFileType) => {
    switch (type) {
      case YamlFileType.AGENTS:
        return 'Agentes';
      case YamlFileType.TASKS:
        return 'Tarefas';
      case YamlFileType.TOOLS:
        return 'Ferramentas';
      case YamlFileType.CONFIG:
        return 'Configuração';
      default:
        return 'YAML';
    }
  };

  const getStatusIcon = (status: YamlStatus) => {
    switch (status) {
      case YamlStatus.GENERATED:
        return '✨';
      case YamlStatus.MODIFIED:
        return '✏️';
      case YamlStatus.VALIDATED:
        return '✅';
      case YamlStatus.ERROR:
        return '❌';
      default:
        return '📄';
    }
  };

  const getStatusText = (status: YamlStatus) => {
    switch (status) {
      case YamlStatus.GENERATED:
        return 'Gerado';
      case YamlStatus.MODIFIED:
        return 'Modificado';
      case YamlStatus.VALIDATED:
        return 'Validado';
      case YamlStatus.ERROR:
        return 'Com Erros';
      default:
        return 'Desconhecido';
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getErrorCount = () => {
    return yamlFile.validationIssues.filter(issue => issue.type === 'error').length;
  };

  const getWarningCount = () => {
    return yamlFile.validationIssues.filter(issue => issue.type === 'warning').length;
  };

  const getSuggestionCount = () => {
    return yamlFile.validationIssues.filter(issue => issue.type === 'suggestion').length;
  };

  return (
    <div className="yaml-file-card">
      <div className="file-header">
        <div className="file-icon">
          {getFileTypeIcon(yamlFile.type)}
        </div>
        <div className="file-info">
          <h3 className="file-name">{yamlFile.name}</h3>
          <div className="file-meta">
            <span className="file-type">{getFileTypeLabel(yamlFile.type)}</span>
            <span className="file-version">v{yamlFile.version}</span>
            {yamlFile.isAutoGenerated && (
              <span className="auto-generated-badge">Auto-gerado</span>
            )}
          </div>
        </div>
        <div className={`file-status status-${yamlFile.status}`}>
          <span className="status-icon">{getStatusIcon(yamlFile.status)}</span>
          <span className="status-text">{getStatusText(yamlFile.status)}</span>
        </div>
      </div>

      <div className="file-content-preview">
        <div className="content-stats">
          {yamlFile.metadata.agentCount !== undefined && (
            <div className="stat">
              <span className="stat-number">{yamlFile.metadata.agentCount}</span>
              <span className="stat-label">Agentes</span>
            </div>
          )}
          {yamlFile.metadata.taskCount !== undefined && (
            <div className="stat">
              <span className="stat-number">{yamlFile.metadata.taskCount}</span>
              <span className="stat-label">Tarefas</span>
            </div>
          )}
          {yamlFile.metadata.toolCount !== undefined && (
            <div className="stat">
              <span className="stat-number">{yamlFile.metadata.toolCount}</span>
              <span className="stat-label">Ferramentas</span>
            </div>
          )}
          {yamlFile.metadata.configItems !== undefined && (
            <div className="stat">
              <span className="stat-number">{yamlFile.metadata.configItems}</span>
              <span className="stat-label">Configs</span>
            </div>
          )}
        </div>

        <div className="code-preview">
          <pre className="yaml-snippet">
            {yamlFile.content.split('\n').slice(0, 3).join('\n')}
            {yamlFile.content.split('\n').length > 3 && '\n...'}
          </pre>
        </div>
      </div>

      {yamlFile.validationIssues.length > 0 && (
        <div className="validation-summary">
          <div className="issues-count">
            {getErrorCount() > 0 && (
              <span className="error-count">
                ❌ {getErrorCount()} erro(s)
              </span>
            )}
            {getWarningCount() > 0 && (
              <span className="warning-count">
                ⚠️ {getWarningCount()} aviso(s)
              </span>
            )}
            {getSuggestionCount() > 0 && (
              <span className="suggestion-count">
                💡 {getSuggestionCount()} sugestão(ões)
              </span>
            )}
          </div>
        </div>
      )}

      <div className="file-dates">
        <div className="date-info">
          <span className="date-label">Modificado:</span>
          <span className="date-value">{formatDate(yamlFile.lastModified)}</span>
        </div>
        <div className="date-info">
          <span className="date-label">Gerado:</span>
          <span className="date-value">{formatDate(yamlFile.lastGenerated)}</span>
        </div>
      </div>

      <div className="file-actions">
        <button 
          className="btn-preview" 
          onClick={() => onPreview(yamlFile)}
        >
          👁️ Visualizar
        </button>
        
        <button 
          className="btn-edit" 
          onClick={() => onEdit(yamlFile)}
        >
          ✏️ Editar
        </button>
        
        <button 
          className="btn-validate" 
          onClick={() => onValidate(yamlFile.id)}
        >
          🔍 Validar
        </button>
        
        <button 
          className="btn-download" 
          onClick={() => onDownload(yamlFile)}
        >
          💾 Download
        </button>
        
        {yamlFile.isAutoGenerated && (
          <button 
            className="btn-regenerate" 
            onClick={() => onRegenerate(yamlFile.id)}
          >
            🔄 Regerar
          </button>
        )}
      </div>
    </div>
  );
};

export default YamlFileCard;
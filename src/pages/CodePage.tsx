import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { 
  Code,
  Download,
  Share2,
  Play,
  Rocket,
  RefreshCw,
  Settings,
  Eye,
  Save,
  Terminal,
  FileCode,
  Bug,
  CheckCircle,
  AlertTriangle
} from 'lucide-react';
import './CodePage.css';
import  CodeGenerationModal  from '../components/code/CodeGenerationModal';
import  CodeEditor  from '../components/code/CodeEditor';
import  FileExplorer  from '../components/code/FileExplorer';
import  ExecutionConsole  from '../components/code/ExecutionConsole';
import  DeploymentPanel  from '../components/code/DeploymentPanel';
import {
  CodeGenerationResult,
  CodeFile,
  CodeGenerationStatus,
  FrameworkType,
  LLMProviderType,
  DeploymentTargetType,
  BuildLogEntry,
  TestResults,
  DeploymentInfo,
  GenerationMetrics,
  CodeExecutionSession,
  ExecutionLogEntry,
  PetriNetExecutionState
} from '../types';

const mockCodeResult: CodeGenerationResult = {
  id: '1',
  projectId: 'project1',
  status: CodeGenerationStatus.READY,
  request: {
    projectId: 'project1',
    petriNetId: 'petri1',
    agentIds: ['agent1', 'agent2'],
    taskIds: ['task1', 'task2'],
    framework: FrameworkType.CREWAI,
    memorySystem: 'langchain_full' as any,
    llmProvider: LLMProviderType.OPENAI,
    pythonVersion: 'python3.11' as any,
    includeTests: true,
    includeDocumentation: true,
    includeLangfuseIntegration: true,
    buildConfig: {} as any,
    deploymentConfig: {} as any,
    testConfig: {} as any,
    monitoringConfig: {} as any,
    outputStructure: 'package'
  },
  files: [
    {
      id: '1',
      name: 'main.py',
      path: 'src/main.py',
      type: 'python',
      content: `#!/usr/bin/env python3
"""
Customer Support System - Main Application
Generated by LangNet Framework
"""

from customer_support_net import CustomerSupportNet
from langfuse import Langfuse
import logging

def main():
    """Initialize and run the Customer Support System"""
    # Configure logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    # Initialize Langfuse monitoring
    langfuse = Langfuse()
    
    # Create and configure the Petri Net
    support_net = CustomerSupportNet()
    
    logger.info("Starting Customer Support System...")
    
    try:
        # Start the system
        support_net.start()
        
        # Keep the system running
        support_net.run()
        
    except KeyboardInterrupt:
        logger.info("Shutting down system...")
        support_net.stop()
    except Exception as e:
        logger.error(f"System error: {e}")
        raise

if __name__ == "__main__":
    main()`,
      size: 1024,
      isGenerated: true,
      isModified: false,
      lastModified: '2024-03-15T14:30:00',
      dependencies: ['customer_support_net', 'langfuse'],
      imports: ['customer_support_net', 'langfuse', 'logging'],
      exports: [],
      syntaxErrors: [],
      lintingIssues: []
    },
    {
      id: '2',
      name: 'customer_support_net.py',
      path: 'src/customer_support_net.py',
      type: 'python',
      content: `"""
Customer Support Petri Net Implementation
"""

from frameworkagentsadapterv4 import *
from langfuse.decorators import observe
import asyncio
from typing import Dict, Any

class CustomerSupportNet:
    """Petri Net implementation for Customer Support System"""
    
    def __init__(self):
        self.state_class = CustomerState
        self.graph = Graph(self.state_class)
        self.agents = {}
        self.tasks = {}
        self.setup_agents()
        self.setup_tasks()
        self.setup_network()
    
    @observe()
    def setup_agents(self):
        """Setup all agents for the system"""
        # Customer Service Agent
        self.agents['customer_service'] = HybridAgentAdapter(
            name="customer_service_agent",
            role="Customer service specialist",
            goal="Handle customer queries effectively",
            tools=[knowledge_tool, ticket_tool]
        )
        
        # Technical Support Agent
        self.agents['technical_support'] = HybridAgentAdapter(
            name="technical_support_agent", 
            role="Technical support specialist",
            goal="Resolve technical issues",
            tools=[diagnostic_tool, solution_tool]
        )
    
    def start(self):
        """Start the Petri Net system"""
        print("Customer Support System started")
    
    def run(self):
        """Run the system"""
        while True:
            # Process incoming requests
            pass
    
    def stop(self):
        """Stop the system gracefully"""
        print("Customer Support System stopped")

class CustomerState:
    """State class for the Customer Support system"""
    
    def __init__(self):
        self.query: str = ""
        self.classification: Dict[str, Any] = {}
        self.sentiment: str = ""
        self.response: str = ""
        self.status: str = "idle"`,
      size: 2048,
      isGenerated: true,
      isModified: false,
      lastModified: '2024-03-15T14:25:00',
      dependencies: ['frameworkagentsadapterv4', 'langfuse', 'asyncio', 'typing'],
      imports: ['frameworkagentsadapterv4', 'langfuse.decorators', 'asyncio', 'typing'],
      exports: ['CustomerSupportNet', 'CustomerState'],
      syntaxErrors: [],
      lintingIssues: []
    }
  ],
  structure: {
    rootPath: '/project',
    directories: [],
    totalFiles: 15,
    totalSize: 524288,
    packageInfo: {
      name: 'customer-support-system',
      version: '1.0.0',
      description: 'AI-powered customer support system',
      author: 'LangNet',
      license: 'MIT',
      dependencies: {},
      devDependencies: {},
      scripts: {}
    }
  },
  buildLog: [
    {
      id: '1',
      timestamp: '2024-03-15T14:30:00',
      level: 'info',
      stage: 'generation',
      message: 'Code generation completed successfully'
    },
    {
      id: '2',
      timestamp: '2024-03-15T14:29:45',
      level: 'info',
      stage: 'generation',
      message: 'Generated Petri Net implementation'
    }
  ],
  testResults: {
    totalTests: 25,
    passedTests: 23,
    failedTests: 2,
    coverage: 82.5,
    duration: 45.2,
    testFiles: []
  },
  deploymentInfo: {
    target: DeploymentTargetType.DOCKER,
    status: 'deployed',
    endpoints: [
      'http://customer-support.langnet.local',
      'http://api.customer-support.langnet.local'
    ],
    resources: [],
    logs: [],
    deployedAt: '2024-03-15T14:35:00'
  },
  generatedAt: '2024-03-15T14:30:00',
  buildTime: 120.5,
  metrics: {
    linesOfCode: 2847,
    numberOfFiles: 15,
    numberOfClasses: 8,
    numberOfFunctions: 45,
    cyclomaticComplexity: 12,
    maintainabilityIndex: 78,
    testCoverage: 82.5,
    codeQualityScore: 8.5,
    securityScore: 9.2,
    performanceScore: 8.8
  },
  errors: [],
  warnings: []
};

// Mock execution session
const mockExecutionSession: CodeExecutionSession = {
  id: 'exec1',
  name: 'Customer Support Execution',
  status: 'running',
  startTime: '2024-03-15T14:32:00',
  input: { query: 'Customer needs help with billing' },
  logs: [
    {
      timestamp: '2024-03-15T14:32:00',
      level: 'info',
      source: 'system',
      message: 'Starting customer support system'
    },
    {
      timestamp: '2024-03-15T14:32:01',
      level: 'info',
      source: 'petri_net',
      message: 'Network initialized with 5 places and 4 transitions'
    }
  ],
  metrics: {
    duration: 150,
    tokensUsed: 1250,
    apiCalls: 8,
    memoryUsage: 256,
    cpuUsage: 45,
    transitionsExecuted: 3,
    agentsActivated: 2,
    tasksCompleted: 1,
    errorsCount: 0,
    warningsCount: 1
  },
  petriNetState: {
    currentPlaces: {
      start: 0,
      process_query: 1,
      analyze_sentiment: 0,
      generate_response: 0,
      end: 0
    },
    enabledTransitions: ['t1_process_query'],
    executionHistory: [
      {
        transitionId: 't1_process_query',
        timestamp: '2024-03-15T14:32:00',
        inputTokens: { start: 1 },
        outputTokens: { process_query: 1 },
        executionTime: 1500,
        result: 'success'
      }
    ],
    deadlocks: [],
    completedPaths: []
  }
};

interface CodePageProps {
  // Props podem ser adicionadas conforme necess√°rio
}

export const CodePage: React.FC<CodePageProps> = () => {
  const { projectId } = useParams<{ projectId: string }>();
  const [codeResult, setCodeResult] = useState<CodeGenerationResult>(mockCodeResult);
  const [isGenerationModalOpen, setIsGenerationModalOpen] = useState(false);
  const [selectedFile, setSelectedFile] = useState<CodeFile | null>(codeResult.files[0]);
  const [activeTab, setActiveTab] = useState<'files' | 'build' | 'tests' | 'deployment'>('files');
  const [isExecuting, setIsExecuting] = useState(false);
  const [executionSession, setExecutionSession] = useState<CodeExecutionSession>(mockExecutionSession);

  const handleGenerate = () => {
    setIsGenerationModalOpen(true);
  };

  const handleExecute = () => {
    setIsExecuting(true);
    // Simulate execution
    setTimeout(() => {
      setIsExecuting(false);
    }, 3000);
  };

  const handleDeploy = () => {
    console.log('Deploying application...');
  };

  const handleDownload = () => {
    // Create a blob with all files and download as zip
    console.log('Downloading project package...');
  };

  const handleFileSelect = (file: CodeFile) => {
    setSelectedFile(file);
  };

  const handleSaveFile = (content: string) => {
    if (selectedFile) {
      setCodeResult(prev => ({
        ...prev,
        files: prev.files.map(file =>
          file.id === selectedFile.id
            ? { ...file, content, isModified: true, lastModified: new Date().toISOString() }
            : file
        )
      }));
      
      setSelectedFile(prev => prev ? { ...prev, content, isModified: true } : null);
    }
  };

  const getStatusColor = (status: CodeGenerationStatus) => {
    switch (status) {
      case CodeGenerationStatus.READY: return 'success';
      case CodeGenerationStatus.GENERATING: return 'warning';
      case CodeGenerationStatus.ERROR: return 'error';
      default: return 'default';
    }
  };

  const getStatusIcon = (status: CodeGenerationStatus) => {
    switch (status) {
      case CodeGenerationStatus.READY: return '‚úÖ';
      case CodeGenerationStatus.GENERATING: return '‚öôÔ∏è';
      case CodeGenerationStatus.ERROR: return '‚ùå';
      case CodeGenerationStatus.PENDING: return '‚è≥';
      default: return 'üìù';
    }
  };

  const getStatusText = (status: CodeGenerationStatus) => {
    switch (status) {
      case CodeGenerationStatus.READY: return 'Pronto';
      case CodeGenerationStatus.GENERATING: return 'Gerando';
      case CodeGenerationStatus.ERROR: return 'Erro';
      case CodeGenerationStatus.PENDING: return 'Pendente';
      case CodeGenerationStatus.GENERATED: return 'Gerado';
      case CodeGenerationStatus.BUILDING: return 'Compilando';
      case CodeGenerationStatus.DEPLOYING: return 'Fazendo Deploy';
      case CodeGenerationStatus.DEPLOYED: return 'Implantado';
      default: return 'Desconhecido';
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <div className="code-page">
      {/* Header - seguindo o padr√£o da SpecificationPage */}
      <div className="code-header">
        <div className="code-header-left">
          <h1>
            {getStatusIcon(codeResult.status)} Gera√ß√£o de C√≥digo Python
            <span className={`code-status-badge status-${codeResult.status}`}>
              {getStatusText(codeResult.status)}
            </span>
          </h1>
          <p>Gere e gerencie o c√≥digo Python da sua aplica√ß√£o baseada em agentes</p>
        </div>
        <div className="code-header-actions">
          <button className="code-action-button secondary" onClick={handleDownload}>
            <Download size={18} />
            Download
          </button>
          <button className="code-action-button secondary" onClick={handleDeploy}>
            <Rocket size={18} />
            Deploy
          </button>
          <button 
            className="code-action-button primary"
            onClick={handleExecute}
            disabled={isExecuting}
          >
            <Play size={18} />
            {isExecuting ? 'Executando...' : 'Executar'}
          </button>
          <button className="code-action-button primary" onClick={handleGenerate}>
            <RefreshCw size={18} />
            Gerar/Atualizar
          </button>
        </div>
      </div>

      {/* Content */}
      <div className="code-content">
        {/* Sidebar */}
        <div className="code-sidebar">
          <div className="code-sidebar-header">
            <h3>Status da Aplica√ß√£o</h3>
            <div className="code-progress-info">
              <div className="code-stat">
                <span className="code-stat-number">{codeResult.metrics.codeQualityScore}/10</span>
                <span className="code-stat-label">Qualidade</span>
              </div>
              <div className="code-stat">
                <span className="code-stat-number">{codeResult.metrics.testCoverage}%</span>
                <span className="code-stat-label">Cobertura</span>
              </div>
              <div className="code-stat">
                <span className="code-stat-number">{codeResult.metrics.numberOfFiles}</span>
                <span className="code-stat-label">Arquivos</span>
              </div>
              <div className="code-stat">
                <span className="code-stat-number">{Math.round(codeResult.buildTime)}s</span>
                <span className="code-stat-label">Build</span>
              </div>
            </div>
          </div>

          <div className="code-sidebar-tabs">
            <button
              className={`code-sidebar-tab ${activeTab === 'files' ? 'active' : ''}`}
              onClick={() => setActiveTab('files')}
            >
              üìÅ Arquivos
            </button>
            <button
              className={`code-sidebar-tab ${activeTab === 'build' ? 'active' : ''}`}
              onClick={() => setActiveTab('build')}
            >
              üî® Build
            </button>
            <button
              className={`code-sidebar-tab ${activeTab === 'tests' ? 'active' : ''}`}
              onClick={() => setActiveTab('tests')}
            >
              üß™ Testes ({codeResult.testResults?.totalTests || 0})
            </button>
            <button
              className={`code-sidebar-tab ${activeTab === 'deployment' ? 'active' : ''}`}
              onClick={() => setActiveTab('deployment')}
            >
              üöÄ Deploy
            </button>
          </div>

          <div className="code-sidebar-content">
            {activeTab === 'files' && (
              <FileExplorer
                files={codeResult.files}
                structure={codeResult.structure}
                onFileSelect={handleFileSelect}
                selectedFile={selectedFile}
              />
            )}
            
            {activeTab === 'build' && (
              <div className="build-panel">
                <h4>Logs de Build</h4>
                <div className="logs-container">
                  {codeResult.buildLog.map((log: BuildLogEntry) => (
                    <div key={log.id} className={`log-entry ${log.level}`}>
                      <span className="timestamp">{new Date(log.timestamp).toLocaleTimeString()}</span>
                      <span className="source">[{log.stage}]</span>
                      <span className="message">{log.message}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {activeTab === 'tests' && (
              <div className="tests-panel">
                <h4>Resultados dos Testes</h4>
                <div className="test-summary">
                  <div className="test-stat">
                    <span className="label">Total:</span>
                    <span className="value">{codeResult.testResults?.totalTests || 0}</span>
                  </div>
                  <div className="test-stat success">
                    <span className="label">Passou:</span>
                    <span className="value">{codeResult.testResults?.passedTests || 0}</span>
                  </div>
                  <div className="test-stat error">
                    <span className="label">Falhou:</span>
                    <span className="value">{codeResult.testResults?.failedTests || 0}</span>
                  </div>
                  <div className="test-stat">
                    <span className="label">Cobertura:</span>
                    <span className="value">{codeResult.testResults?.coverage || 0}%</span>
                  </div>
                </div>
              </div>
            )}
            
            {activeTab === 'deployment' && codeResult.deploymentInfo && (
              <DeploymentPanel
                deploymentInfo={codeResult.deploymentInfo}
              />
            )}
          </div>
        </div>

        {/* Main Content */}
        <div className="code-main">
          <div className="code-main-header">
            <div className="code-document-info">
              <h2>Sistema de Suporte ao Cliente</h2>
              <div className="code-document-meta">
                <div className="code-version-info">
                  <FileCode size={16} />
                  <span>{codeResult.request.framework} + {codeResult.request.llmProvider}</span>
                </div>
                <span>Gerado em {formatDate(codeResult.generatedAt)}</span>
                <span>{codeResult.metrics.linesOfCode.toLocaleString()} linhas</span>
              </div>
            </div>
            <div className="code-main-actions">
              <button className="code-action-button secondary">
                <Eye size={16} />
                Visualizar
              </button>
              <button className="code-action-button secondary">
                <Settings size={16} />
                Configurar
              </button>
            </div>
          </div>

          <div className="code-editor-container">
            {codeResult.files.length === 0 ? (
              <div className="code-empty-state">
                <Code size={64} />
                <h3>C√≥digo n√£o gerado</h3>
                <p>Gere o c√≥digo Python da sua aplica√ß√£o baseada em agentes</p>
                <button className="code-action-button primary" onClick={handleGenerate}>
                  <RefreshCw size={18} />
                  Gerar C√≥digo
                </button>
              </div>
            ) : (
              <div className="code-editor-main">
                <div className="editor-header">
                  <div className="file-tabs">
                    {selectedFile && (
                      <div className="tab active">
                        <FileCode size={16} />
                        <span>{selectedFile.name}</span>
                        {selectedFile.isModified && <span className="changes-indicator">‚óè</span>}
                      </div>
                    )}
                  </div>
                  
                  <div className="editor-actions">
                    <button className="code-action-button secondary">
                      <Save size={14} />
                      Salvar
                    </button>
                  </div>
                </div>

                {selectedFile && (
                  <CodeEditor
                    file={selectedFile}
                    onSave={handleSaveFile}
                  />
                )}
              </div>
            )}
          </div>
        </div>

        {/* Console Area */}
        <div className="code-console">
          <ExecutionConsole
            logs={executionSession.logs}
            petriNetState={executionSession.petriNetState}
            isExecuting={isExecuting}
          />
        </div>
      </div>

      {/* Generation Modal */}
      {isGenerationModalOpen && (
        <CodeGenerationModal
          isOpen={isGenerationModalOpen}
          onClose={() => setIsGenerationModalOpen(false)}
          onGenerate={(config) => {
            console.log('Generating code with config:', config);
            setIsGenerationModalOpen(false);
          }}
          projectId={projectId || ''}
        />
      )}
    </div>
  );
};

export default CodePage;
/* src/pages/YamlPage.tsx - VERSÃO CORRIGIDA DEFINITIVA */
/* src/pages/YamlPage.tsx - VERSÃO CORRIGIDA DEFINITIVA */
import React, { useState, useEffect } from 'react';
import { Plus, Download, Upload, RefreshCw, CheckCircle, AlertCircle, FileText } from 'lucide-react';
import { YamlFile, YamlFileType, YamlGenerationRequest, YamlStatus } from '../types';
import YamlFileCard from '../components/yaml/YamlFileCard';
import YamlGenerationModal from '../components/yaml/YamlGenerationModal';
import YamlEditorModal from '../components/yaml/YamlEditorModal';
import './YamlPage.css';


// Mock data for demonstration
const mockYamlFiles: YamlFile[] = [
  {
    id: '1',
    projectId: 'project1',
    name: 'agents.yaml',
    type: YamlFileType.AGENTS,
    content: `customer_service_agent:
  role: >
    You are a customer service specialist responsible for handling customer queries
  goal: >
    Understand customer needs and provide appropriate solutions or routing
  backstory: >
    You have 5 years of experience in customer service and deep knowledge of
    company products and policies
  tools:
    - knowledge_base_tool
    - ticket_creation_tool
    - customer_history_tool
  verbose: true
  allow_delegation: false`,
    status: YamlStatus.VALIDATED,
    lastModified: '2024-03-15T10:30:00',
    lastGenerated: '2024-03-15T10:00:00',
    version: '1.0',
    validationIssues: [
      { 
        type: 'suggestion', 
        message: 'All agents have required fields',
        severity: 'low',
        line: 0
      }
    ],
    isAutoGenerated: true,
    metadata: {
      agentCount: 1,
      toolCount: 3
    }
  },
  {
    id: '2',
    projectId: 'project1',
    name: 'tasks.yaml',
    type: YamlFileType.TASKS,
    content: `process_customer_query:
  description: >
    Analyze incoming customer query and determine appropriate response path
  expected_output: >
    Structured classification with priority level and routing information
  agent: customer_service_agent
  tools:
    - text_analysis_tool
    - classification_model
    - priority_assessment_tool`,
    status: YamlStatus.MODIFIED,
    lastModified: '2024-03-15T11:00:00',
    lastGenerated: '2024-03-15T10:00:00',
    version: '1.1',
    validationIssues: [
      { 
        type: 'warning', 
        message: 'Consider adding context field for better task chaining',
        severity: 'medium',
        line: 5
      }
    ],
    isAutoGenerated: true,
    metadata: {
      taskCount: 1,
      toolCount: 3
    }
  },
  {
    id: '3',
    projectId: 'project1',
    name: 'tools.yaml',
    type: YamlFileType.TOOLS,
    content: `knowledge_base_tool:
  type: "RAG"
  description: "Search company knowledge base for relevant information"
  
ticket_creation_tool:
  type: "API"
  description: "Create support tickets in the ticketing system"
  
customer_history_tool:
  type: "Database"
  description: "Access customer interaction history"`,
    status: YamlStatus.ERROR,
    lastModified: '2024-03-15T09:45:00',
    lastGenerated: '2024-03-15T09:00:00',
    version: '1.0',
    validationIssues: [
      { 
        type: 'error', 
        message: 'Missing required field "parameters" in knowledge_base_tool',
        severity: 'high',
        line: 2
      },
      { 
        type: 'suggestion', 
        message: 'Consider adding authentication configuration',
        severity: 'low',
        line: 8
      }
    ],
    isAutoGenerated: false,
    metadata: {
      toolCount: 3
    }
  }
];



const YamlPage: React.FC = () => {
  const [yamlFiles, setYamlFiles] = useState<YamlFile[]>(mockYamlFiles);
  const [selectedType, setSelectedType] = useState<YamlFileType | 'all'>('all');
  const [selectedFile, setSelectedFile] = useState<YamlFile | null>(null);
  const [showGenerationModal, setShowGenerationModal] = useState(false);
  const [showEditorModal, setShowEditorModal] = useState(false);
  const [additionalInstructions, setAdditionalInstructions] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const currentProjectId = 'project1'; // This should come from context/props

  // Helper function to check if file is valid
  const isFileValid = (file: YamlFile): boolean => {
    return !file.validationIssues.some(issue => issue.severity === 'high');
  };

  // Filter files based on type and search
  const filteredFiles = yamlFiles.filter(file => {
    const matchesType = selectedType === 'all' || file.type === selectedType;
    const matchesSearch = file.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         file.content.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesType && matchesSearch;
  });

  // Count files by type
  const fileCounts = {
    all: yamlFiles.length,
    [YamlFileType.AGENTS]: yamlFiles.filter(f => f.type === YamlFileType.AGENTS).length,
    [YamlFileType.TASKS]: yamlFiles.filter(f => f.type === YamlFileType.TASKS).length,
    [YamlFileType.TOOLS]: yamlFiles.filter(f => f.type === YamlFileType.TOOLS).length,
    [YamlFileType.CONFIG]: yamlFiles.filter(f => f.type === YamlFileType.CONFIG).length
  };

  // Count validation status
  const validationCounts = {
    valid: yamlFiles.filter(f => isFileValid(f)).length,
    invalid: yamlFiles.filter(f => !isFileValid(f)).length,
    warnings: yamlFiles.filter(f => 
      f.validationIssues.some(m => m.severity === 'medium')
    ).length
  };

  const handleGenerateYaml = () => {
    setShowGenerationModal(true);
  };

  const handleGenerationComplete = (request: YamlGenerationRequest) => {
    // Simulate generating YAML files based on the request
    const newFiles: YamlFile[] = [];
    
    if (request.fileTypes.includes(YamlFileType.AGENTS)) {
      newFiles.push({
        id: Date.now().toString(),
        projectId: currentProjectId,
        name: 'generated_agents.yaml',
        type: YamlFileType.AGENTS,
        content: '# Generated agents YAML\n',
        status: YamlStatus.GENERATED,
        lastModified: new Date().toISOString(),
        lastGenerated: new Date().toISOString(),
        version: '1.0',
        validationIssues: [],
        isAutoGenerated: true,
        metadata: {
          agentCount: 0
        }
      });
    }
    
    if (request.fileTypes.includes(YamlFileType.TASKS)) {
      newFiles.push({
        id: (Date.now() + 1).toString(),
        projectId: currentProjectId,
        name: 'generated_tasks.yaml',
        type: YamlFileType.TASKS,
        content: '# Generated tasks YAML\n',
        status: YamlStatus.GENERATED,
        lastModified: new Date().toISOString(),
        lastGenerated: new Date().toISOString(),
        version: '1.0',
        validationIssues: [],
        isAutoGenerated: true,
        metadata: {
          taskCount: 0
        }
      });
    }
    
    setYamlFiles([...yamlFiles, ...newFiles]);
    setShowGenerationModal(false);
  };

  const handleEditFile = (file: YamlFile) => {
    setSelectedFile(file);
    setShowEditorModal(true);
  };

  const handleSaveFile = (fileId: string, content: string) => {
    setYamlFiles(yamlFiles.map(f => 
      f.id === fileId 
        ? { 
            ...f, 
            content, 
            lastModified: new Date().toISOString(),
            status: YamlStatus.MODIFIED 
          }
        : f
    ));
    setShowEditorModal(false);
  };

  const handleDeleteFile = (fileId: string) => {
    if (window.confirm('Are you sure you want to delete this file?')) {
      setYamlFiles(yamlFiles.filter(f => f.id !== fileId));
    }
  };

  const handleValidateFile = (fileId: string) => {
    // Simulate validation
    const file = yamlFiles.find(f => f.id === fileId);
    if (!file) return;

    const newValidation: YamlFile['validationIssues'] = [];
    
    if (file.type === YamlFileType.AGENTS && !file.content.includes('role:')) {
      newValidation.push({ 
        type: 'error', 
        message: 'Missing required field "role"',
        severity: 'high',
        line: 1
      });
    }
    
    if (file.type === YamlFileType.TASKS && !file.content.includes('context:')) {
      newValidation.push({ 
        type: 'warning', 
        message: 'Consider adding context field',
        severity: 'medium',
        line: 5
      });
    }
    
    if (newValidation.length === 0) {
      newValidation.push({ 
        type: 'suggestion', 
        message: 'Validation passed',
        severity: 'low',
        line: 0
      });
    }
    
    setYamlFiles(yamlFiles.map(f => 
      f.id === fileId 
        ? { 
            ...f, 
            validationIssues: newValidation,
            status: newValidation.some(v => v.severity === 'high') 
              ? YamlStatus.ERROR 
              : YamlStatus.VALIDATED
          }
        : f
    ));
  };

  const handleValidateAll = async () => {
    yamlFiles.forEach(file => handleValidateFile(file.id));
  };

  const handleDownloadFile = (file: YamlFile) => {
    const blob = new Blob([file.content], { type: 'text/yaml' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = file.name;
    a.click();
    URL.revokeObjectURL(url);
  };

  const handleRegenerateFile = (fileId: string) => {
    // Simulate regeneration
    console.log('Regenerating file:', fileId);
  };

  const handlePreviewFile = (file: YamlFile) => {
    // Open preview modal or show preview
    console.log('Previewing file:', file.name);
  };

  const handleExportAll = async () => {
    const combinedContent = yamlFiles.map(file => 
      `# ${file.name}\n${file.content}\n\n`
    ).join('---\n');
    
    const blob = new Blob([combinedContent], { type: 'text/yaml' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'yaml_config_all.yaml';
    a.click();
    URL.revokeObjectURL(url);
  };

  const handleImportFiles = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files) return;
    
    Array.from(files).forEach(file => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const content = e.target?.result as string;
        let type: YamlFileType = YamlFileType.AGENTS;
        
        // Determine type from filename
        if (file.name.includes('task')) type = YamlFileType.TASKS;
        else if (file.name.includes('tool')) type = YamlFileType.TOOLS;
        else if (file.name.includes('config')) type = YamlFileType.CONFIG;
        
        const newFile: YamlFile = {
          id: Date.now().toString(),
          projectId: currentProjectId,
          name: file.name,
          type: type,
          content: content,
          status: YamlStatus.GENERATED,
          lastModified: new Date().toISOString(),
          lastGenerated: new Date().toISOString(),
          version: '1.0',
          validationIssues: [],
          isAutoGenerated: false,
          metadata: {}
        };
        
        setYamlFiles(prev => [...prev, newFile]);
      };
      reader.readAsText(file);
    });
  };

  return (
    <div className="yaml-page">
      <div className="yaml-header">
        <div className="yaml-header-left">
          <h1>YAML Configuration</h1>
          <p>Manage and validate your agent system configuration files</p>
        </div>
        <div className="yaml-header-actions">
          <button className="yaml-action-button secondary" onClick={handleValidateAll}>
            <CheckCircle size={18} />
            Validate All
          </button>
          <button className="yaml-action-button secondary" onClick={handleExportAll}>
            <Download size={18} />
            Export All
          </button>
          <label className="yaml-action-button secondary">
            <Upload size={18} />
            Import
            <input
              type="file"
              multiple
              accept=".yaml,.yml"
              onChange={handleImportFiles}
              style={{ display: 'none' }}
            />
          </label>
          <button className="yaml-action-button primary" onClick={handleGenerateYaml}>
            <Plus size={18} />
            Generate YAML
          </button>
        </div>
      </div>

      <div className="yaml-instructions">
        <h3>Additional Instructions for YAML Generation</h3>
        <p>Provide any specific instructions or requirements for the AI agent to consider when generating YAML files:</p>
        <textarea
          value={additionalInstructions}
          onChange={(e) => setAdditionalInstructions(e.target.value)}
          placeholder="Example: Use GPT-4 for all agents, include error handling tasks, add monitoring tools..."
          rows={3}
        />
      </div>

      <div className="yaml-content">
        <div className="yaml-sidebar">
          <div className="yaml-search">
            <input
              type="text"
              placeholder="Search files..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          
          <div className="yaml-filters">
            <h3>File Types</h3>
            <div className="yaml-filter-list">
              {(['all', YamlFileType.AGENTS, YamlFileType.TASKS, YamlFileType.TOOLS, YamlFileType.CONFIG] as const).map(type => (
                <button
                  key={type}
                  className={`yaml-filter-item ${selectedType === type ? 'active' : ''}`}
                  onClick={() => setSelectedType(type)}
                >
                  <FileText size={16} />
                  <span>{type === 'all' ? 'All' : type.charAt(0).toUpperCase() + type.slice(1).toLowerCase()}</span>
                  <span className="yaml-filter-count">{type === 'all' ? fileCounts.all : fileCounts[type]}</span>
                </button>
              ))}
            </div>
          </div>
          
          <div className="yaml-validation-summary">
            <h3>Validation Status</h3>
            <div className="yaml-validation-stats">
              <div className="yaml-stat valid">
                <CheckCircle size={16} />
                <span>Valid: {validationCounts.valid}</span>
              </div>
              <div className="yaml-stat invalid">
                <AlertCircle size={16} />
                <span>Invalid: {validationCounts.invalid}</span>
              </div>
              <div className="yaml-stat warnings">
                <AlertCircle size={16} />
                <span>Warnings: {validationCounts.warnings}</span>
              </div>
            </div>
          </div>
        </div>

        <div className="yaml-main">
          {filteredFiles.length === 0 ? (
            <div className="yaml-empty-state">
              <FileText size={48} />
              <h3>No YAML files found</h3>
              <p>Generate new YAML files from your specifications or import existing ones.</p>
              <button className="yaml-action-button primary" onClick={handleGenerateYaml}>
                <Plus size={18} />
                Generate YAML
              </button>
            </div>
          ) : (
            <div className="yaml-files-grid">
              {filteredFiles.map(file => (
                <YamlFileCard
                  key={file.id}
                  yamlFile={file}
                  onEdit={handleEditFile}
                  onValidate={handleValidateFile}
                  onDownload={handleDownloadFile}
                  onRegenerate={handleRegenerateFile}
                  onPreview={handlePreviewFile}
                />
              ))}
            </div>
          )}
        </div>
      </div>

      {showGenerationModal && (
        <YamlGenerationModal
          isOpen={showGenerationModal}
          onClose={() => setShowGenerationModal(false)}
          onGenerate={handleGenerationComplete}
          projectId={currentProjectId}
        />
      )}

      {showEditorModal && selectedFile && (
        <YamlEditorModal
          isOpen={showEditorModal}
          yamlFile={selectedFile}
          onClose={() => setShowEditorModal(false)}
          onSave={handleSaveFile}
          onValidate={(fileId, content) => {
            // Return validation issues
            return [];
          }}
        />
      )}
    </div>
  );
};

export default YamlPage;